#ifndef CELLULAR_H
#define CELLULAR_H
#include <iostream>
#include <vector>
/* The class 'automaton_state' represents the state of a 1D, binary cellular
 * automaton, extending arbitrarily far into each direction from index 0 (i.e.
 * both negative and positive indices are valid, and they are valid at all
 * times). Calling get() or set() must never cause out-of-bounds memory access.
 * The min_index() and max_index() methods are advisory, but any non-zero cells
 * must fall within the [min_index(), max_index()] range. */
class automaton_state
{
    std::vector<bool> states = {};
    int minIndex = 1;
    int maxIndex = -1;
    /* attributes are up to you */
public:
    automaton_state(){} /* construct a state with all cells set to 0 (false) */
    int min_index() const {return minIndex;} /* lower bound on the indices of non-zero cells */
    int max_index() const {return maxIndex;} /* upper bound of the same */
    bool get( int index ) const {
        if (min_index() <= index && index <= max_index())
            return states[(unsigned int) (index - min_index())];
        return false;
    } /* read a value */
    void set( int index, bool value ) {
        if (minIndex > maxIndex && states.size() == 0) {
            if (value == false)
                return;
            states.push_back(false);
            states.push_back(true);
            states.push_back(false);
            maxIndex = index + 1;
            minIndex = index - 1;
        }
        if (value == false) {
            if (index >= min_index() && index <= max_index())
                states[(unsigned int) (index - min_index())] = value;
            return;
        }
        if (index < min_index()) {
            states.insert(states.begin(), (unsigned int)std::abs(index - min_index()) + 1, 0);
            minIndex = index - 1;
        }
        if (index > max_index()) {
            states.insert(states.end(), (unsigned int) (index - max_index()) + 1, 0);
            maxIndex = index + 1;
        }
        states[(unsigned int) (index - min_index())] = value;
    }
};
/* 'automaton' class represents the automaton itself. The automaton keeps
 * its state internally and allows the user to perform simulation on this
 * internal state. Initially, the state of the automaton is 0 (false)
 * everywhere. Rules which go from '000' to '1' are forbidden. The rule is
 * given to the constructor by its Wolfram code. */
std::vector<bool> toBin(int rule);
class automaton
{
    automaton_state stat;
    std::vector<bool> rules;
    /* attributes are up to you */
public:
    automaton( int rule ) {rules = toBin(rule);} /* constructs an automaton from a rule number */
    auto getRule() {return rules;}
    void reset( const automaton_state &s ) {
        stat = s;} /* put the automaton into this state */
    void set( int index, bool value ) {stat.set(index, value);} /* change the cell value at the given index */
    void step() {
        automaton_state temp;
        int pattern = 0;
        for (int i = stat.min_index(); i <= stat.max_index(); i++) {
            if (i == stat.min_index()) pattern = 2 * stat.get(i) + stat.get(i + 1);
            else if (i == stat.max_index()) pattern = 4 * stat.get(i - 1) + 2 * stat.get(i);
                else pattern = 4 * stat.get((i - 1)) + 2 * stat.get(i) + stat.get((1 + i));
            temp.set(i - stat.min_index(), rules.at((unsigned int) pattern));
        }
        for (int i = stat.min_index(); i <= stat.max_index(); i++) {
            stat.set(i, temp.get(i - stat.min_index()));
        }
        if (stat.get(stat.min_index())) {       //Expand front of vector by 2 if first is True (correction)
            stat.set(stat.min_index() - 1, true);
            stat.set(stat.min_index() + 1, false);
        }
        if (stat.get(stat.max_index())) {       //Expand end of vector by 2 if last is True (correction)
            stat.set(stat.max_index() + 1, true);
            stat.set(stat.max_index() - 1, false);
        }
    } /* perform a single computation step */
    void run( int steps ) {
        for (int i = 0; i < steps; i++) {
            step();
        }
    } /* compute any number of steps */
    bool cell( int index ) const {return stat.get(index);}  /* return the current cell value at 'index' */
    automaton_state state() const {return stat;} /* return the current state */
};
/* the 'compute_cell' function takes a rule number, an initial state, the
 * number of steps and an index into the state; it then returns the state of
 * the indexed cell after `steps` rounds of computation */
bool compute_cell( int rule, const automaton_state &start, int steps, int index );
#endif // CELLULAR_H
